#!/usr/bin/env python3

"""BLOM namelist creator
"""

# Typically ignore this.
# pylint: disable=invalid-name

# Disable these because this is our standard setup
# pylint: disable=wildcard-import,unused-wildcard-import,wrong-import-position

import os, shutil, sys, glob, filecmp, imp, re

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "CIME", "Tools"))

from standard_script_setup import *
from CIME.case import Case
from CIME.nmlgen import NamelistGenerator
from CIME.utils import expect
from CIME.utils import run_cmd_no_fail, expect
from CIME.utils import run_cmd
from CIME.buildnml import create_namelist_infile, parse_input

import glob, shutil
logger = logging.getLogger(__name__)

# pylint: disable=too-many-arguments,too-many-locals,too-many-branches,too-many-statements
####################################################################################
def _create_namelists(case, confdir, infile, nmlgen):
####################################################################################

    """Write out the namelist for this component.

    Most arguments are the same as those for `NamelistGenerator`.
    The `confdir` argument is used to specify the directory  in which output files will be placed.
    """

    CASEROOT      = case.get_value("CASEROOT")
    RUN_TYPE      = case.get_value("RUN_TYPE")
    CONTINUE_RUN  = case.get_value("CONTINUE_RUN")
    CASEBUILD     = case.get_value("CASEBUILD")
    CCSM_CO2_PPMV = case.get_value("CCSM_CO2_PPMV")
    NINST_OCN     = case.get_value("NINST_OCN")

    ocn_grid = case.get_value("OCN_GRID")
    ocn_ncpl = case.get_value("OCN_NCPL")
    blom_unit = case.get_value("BLOM_UNIT")
    blom_vcoord = case.get_value("BLOM_VCOORD")
    pio_typename_ocn = case.get_value("PIO_TYPENAME_OCN")
    pio_netcdf_format_ocn = case.get_value("PIO_NETCDF_FORMAT_OCN")
    is_test =  case.get_value("TEST")
    blom_river_nutrients = case.get_value("BLOM_RIVER_NUTRIENTS")
    blom_n_deposition = case.get_value("BLOM_N_DEPOSITION")
    blom_ndep_scenario = case.get_value("BLOM_NDEP_SCENARIO")
    blom_coupling = case.get_value("BLOM_COUPLING")
    blom_tracer_modules = case.get_value("BLOM_TRACER_MODULES")
    hamocc_vsls = case.get_value("HAMOCC_VSLS")
    hamocc_ciso = case.get_value("HAMOCC_CISO")
    hamocc_sedspinup = case.get_value("HAMOCC_SEDSPINUP")
    hamocc_sedspinup_yr_start = case.get_value("HAMOCC_SEDSPINUP_YR_START")
    hamocc_sedspinup_yr_end = case.get_value("HAMOCC_SEDSPINUP_YR_END")
    hamocc_sedspinup_ncycle = case.get_value("HAMOCC_SEDSPINUP_NCYCLE")

    if hamocc_vsls and ocn_grid != "tnx1v4":
        expect(False, 
               "HAMOCC_VSLS is not supported at this grid resolution (no swa-climatology available)")

    config = {}
    config['ocn_grid'] = ocn_grid
    config['ocn_ncpl'] = str(ocn_ncpl)
    config['pio_typename_ocn'] = pio_typename_ocn
    config['pio_netcdf_format_ocn'] = pio_netcdf_format_ocn
    config["is_test"] = "yes" if is_test else "no"

    config['blom_unit'] = blom_unit if blom_unit else "unset"
    config['blom_vcoord'] = blom_vcoord
    config["blom_river_nutrients"] = "yes" if blom_river_nutrients else "no"
    config["blom_ndep_scenario"] = "ssp" if "ssp" in blom_ndep_scenario else blom_ndep_scenario
    config["blom_n_deposition"] = "yes" if blom_n_deposition else "no"
    config["blom_coupling"] = blom_coupling
    config["blom_tracer_modules"] = blom_tracer_modules

    config["hamocc_vsls"] = "yes" if hamocc_vsls else "no"
    config["hamocc_ciso"] = "yes" if hamocc_ciso else "no" 
    config["hamocc_sedspinup"] = "yes" if hamocc_sedspinup else "no"
    config["hamocc_sedspinup_yr_start"] = hamocc_sedspinup_yr_start
    config["hamocc_sedspinup_yr_end"] = hamocc_sedspinup_yr_end
    config["hamocc_sedspinup_ncycle"] = hamocc_sedspinup_ncycle

    #----------------------------------------------------
    # initialize namelist defaults
    #----------------------------------------------------
    nmlgen.init_defaults(infile, config)

    if nmlgen.get_value('SWACLIMFILE') == 'UNSET':
        nmlgen.set_value('SWACLIMFILE', value="")

    if nmlgen.get_value('INID13C') == 'UNSET':
        nmlgen.set_value('INID13C', value="")

    if nmlgen.get_value('INID14C') == 'UNSET':
        nmlgen.set_value('INID14C', value="")

    run_startdate = case.get_value("RUN_STARTDATE")
    idate = run_startdate.replace('-','')
    nmlgen.set_value("IDATE", idate)
    nmlgen.set_value("IDATE0", idate)

    #----------------------------------------------------
    # Write out namelist groups
    #----------------------------------------------------
    groups=['limits','diffusion']

    cwmtag = nmlgen.get_default('CWMTAG', config=config)
    if cwmtag != 'UNSET':
        groups.append('cwmod')

    groups.append('merdia')
    groups.append('secdia')
    groups.append('diaphy')

    if case.get_value("BLOM_VCOORD") == "cntiso_hybrid":
        groups.append('vcoord')

    blom_tracer_modules = case.get_value("BLOM_TRACER_MODULES")
    ecosys_on = "ecosys" in blom_tracer_modules
    # DEBUG
    ecosys_on = True
    # DEBUG
    if ecosys_on:
        groups.append("bgcnml")
        groups.append("bgcoafx")
        groups.append("diabgc")

    data_list_path = os.path.join(case.get_case_root(), "Buildconf", "blom.input_data_list")
    if os.path.exists(data_list_path):
        os.remove(data_list_path)

    namelist_file = os.path.join(confdir, "ocn_in")
    nmlgen.write_output_file(namelist_file, data_list_path, groups=groups, sorted_groups=False)

    # replace MER_REGFLAG1 -> MER_REGFLAG4 with array syntax
    from pathlib import Path
    file = Path(namelist_file)
    file.write_text(file.read_text().replace('MER_REGFLG1','MER_REGFLG(1,:)'))
    file.write_text(file.read_text().replace('MER_REGFLG2','MER_REGFLG(2,:)'))
    file.write_text(file.read_text().replace('MER_REGFLG3','MER_REGFLG(3,:)'))
    file.write_text(file.read_text().replace('MER_REGFLG4','MER_REGFLG(4,:)'))
    
    logger.debug(f"blom: grid is {ocn_grid}")

###############################################################################
def buildnml(case, caseroot, compname):
###############################################################################
    """Build the blom namelist """

    # Build the component namelist
    if compname != "blom":
        raise AttributeError
    comp_root_dir_ocn = case.get_value("COMP_ROOT_DIR_OCN")
    srcroot = case.get_value("SRCROOT")
    rundir = case.get_value("RUNDIR")
    ninst = case.get_value("NINST_OCN")

    # determine the confdir directory
    confdir = os.path.join(caseroot,"Buildconf","blomconf")
    if not os.path.isdir(confdir):
        os.makedirs(confdir)

    #----------------------------------------------------
    # Construct the namelist generator
    #----------------------------------------------------
    # determine directory for user modified namelist_definitions.xml and namelist_defaults.xml
    user_xml_dir = os.path.join(caseroot, "SourceMods", "src.blom")
    expect (os.path.isdir(user_xml_dir),
            "user_xml_dir %s does not exist " %user_xml_dir)

    # user definition *replaces* existing definition.
    namelist_xml_dir = os.path.join(comp_root_dir_ocn, "cime_config")
    definition_file = [os.path.join(namelist_xml_dir, "namelist_definition_blom.xml")]
    user_definition = os.path.join(user_xml_dir, "namelist_definition_blom.xml")
    if os.path.isfile(user_definition):
        definition_file = [user_definition]
    for file_ in definition_file:
        expect(os.path.isfile(file_), "Namelist XML file %s not found!" % file_)

    # Create the namelist generator object - independent of instance
    nmlgen = NamelistGenerator(case, definition_file)

    #----------------------------------------------------
    # Loop over instances
    #----------------------------------------------------
    for inst_counter in range(1, ninst+1):

        # determine instance string
        inst_string = ""
        if ninst > 1:
            inst_string = '_' + '%04d' % inst_counter

        # If multi-instance case does not have restart file, use
        # single-case restart for each instance
        rpointer = "rpointer.ice"
        if (os.path.isfile(os.path.join(rundir,rpointer)) and
            (not os.path.isfile(os.path.join(rundir,rpointer + inst_string)))):
            shutil.copy(os.path.join(rundir, rpointer),
                        os.path.join(rundir, rpointer + inst_string))

        inst_string_label = inst_string
        if not inst_string_label:
            inst_string_label = "\"\""

        # create namelist_infile using user_nl_file as input
        user_nl_file = os.path.join(caseroot, "user_nl_blom" + inst_string)
        expect(os.path.isfile(user_nl_file),
               "Missing required user_nl_file %s " %(user_nl_file))
        infile = os.path.join(confdir, "namelist_infile")
        create_namelist_infile(case, user_nl_file, infile)
        namelist_infile = [infile]

        # create namelist
        _create_namelists(case, confdir, namelist_infile, nmlgen)

        # copy namelist files to rundir
        if os.path.isdir(rundir):
            file1  = os.path.join(confdir, "ocn_in")
            file2 = os.path.join(rundir, "ocn_in")
            if inst_string:
                file2 += inst_string
            logger.debug("BLOM namelist copy: file1 %s file2 %s " %(file1, file2))
            shutil.copy2(file1, file2)

def _strip_comments(fh, token="!"):
    ''' strip anything after token in each line of fh '''
    for line in fh:
        s = line.split(token, 1)[0].strip()
        if s:
            yield s


###############################################################################
def _main_func():

    caseroot = parse_input(sys.argv)
    with Case(caseroot, read_only=False) as case:
        buildnml(case, caseroot, "blom")

if __name__ == "__main__":
    _main_func()
